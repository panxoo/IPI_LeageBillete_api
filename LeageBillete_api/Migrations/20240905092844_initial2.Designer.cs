// <auto-generated />
using System;
using LeageBillete_api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LeageBillete_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240905092844_initial2")]
    partial class initial2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("LeageBillete_api.Model.DataBase.Detail_purchase", b =>
                {
                    b.Property<int>("Detail_purchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code_detail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Event_DayId")
                        .HasColumnType("int");

                    b.Property<int>("Event_leageId")
                        .HasColumnType("int");

                    b.Property<int>("Price_ticketId")
                        .HasColumnType("int");

                    b.Property<int>("Quantite_ticket")
                        .HasColumnType("int");

                    b.Property<int>("Ticket_purchaseId")
                        .HasColumnType("int");

                    b.Property<float>("Total_price")
                        .HasColumnType("float");

                    b.HasKey("Detail_purchaseId");

                    b.HasIndex("Event_DayId");

                    b.HasIndex("Event_leageId");

                    b.HasIndex("Price_ticketId");

                    b.HasIndex("Ticket_purchaseId");

                    b.ToTable("Detail_Purchases");
                });

            modelBuilder.Entity("LeageBillete_api.Model.DataBase.Event_day", b =>
                {
                    b.Property<int>("Event_DayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Capacity_ticket")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Event_leageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActif")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Prix_eleve")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Event_DayId");

                    b.HasIndex("Event_leageId");

                    b.ToTable("Event_Days");
                });

            modelBuilder.Entity("LeageBillete_api.Model.DataBase.Event_leage", b =>
                {
                    b.Property<int>("Event_leageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Event_leageId");

                    b.ToTable("Event_leages");
                });

            modelBuilder.Entity("LeageBillete_api.Model.DataBase.Price_ticket", b =>
                {
                    b.Property<int>("Price_ticketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Event_leageId")
                        .HasColumnType("int");

                    b.Property<bool>("Is_all_event")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Price_unit")
                        .HasColumnType("float");

                    b.Property<bool>("Prix_eleve")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Quantite_ticket_min")
                        .HasColumnType("int");

                    b.HasKey("Price_ticketId");

                    b.HasIndex("Event_leageId");

                    b.ToTable("Price_Tickets");
                });

            modelBuilder.Entity("LeageBillete_api.Model.DataBase.Ticket_purchase", b =>
                {
                    b.Property<int>("Ticket_purchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address_facture")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Code_reserva")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date_purchase")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Firstname_facture")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname_facture")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Total_price")
                        .HasColumnType("float");

                    b.HasKey("Ticket_purchaseId");

                    b.ToTable("Ticket_purchases");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LeageBillete_api.Model.DataBase.Detail_purchase", b =>
                {
                    b.HasOne("LeageBillete_api.Model.DataBase.Event_day", "Event_Day")
                        .WithMany("Detail_Purchases")
                        .HasForeignKey("Event_DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeageBillete_api.Model.DataBase.Event_leage", "Event_Leage")
                        .WithMany("Detail_Purchases")
                        .HasForeignKey("Event_leageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeageBillete_api.Model.DataBase.Price_ticket", "Price_Ticket")
                        .WithMany("Detail_Purchases")
                        .HasForeignKey("Price_ticketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeageBillete_api.Model.DataBase.Ticket_purchase", "ticket_Purchase")
                        .WithMany("Detail_Purchases")
                        .HasForeignKey("Ticket_purchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event_Day");

                    b.Navigation("Event_Leage");

                    b.Navigation("Price_Ticket");

                    b.Navigation("ticket_Purchase");
                });

            modelBuilder.Entity("LeageBillete_api.Model.DataBase.Event_day", b =>
                {
                    b.HasOne("LeageBillete_api.Model.DataBase.Event_leage", "Event_Leage")
                        .WithMany("Event_Days")
                        .HasForeignKey("Event_leageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event_Leage");
                });

            modelBuilder.Entity("LeageBillete_api.Model.DataBase.Price_ticket", b =>
                {
                    b.HasOne("LeageBillete_api.Model.DataBase.Event_leage", "Event_Leage")
                        .WithMany("Price_tickets")
                        .HasForeignKey("Event_leageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event_Leage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeageBillete_api.Model.DataBase.Event_day", b =>
                {
                    b.Navigation("Detail_Purchases");
                });

            modelBuilder.Entity("LeageBillete_api.Model.DataBase.Event_leage", b =>
                {
                    b.Navigation("Detail_Purchases");

                    b.Navigation("Event_Days");

                    b.Navigation("Price_tickets");
                });

            modelBuilder.Entity("LeageBillete_api.Model.DataBase.Price_ticket", b =>
                {
                    b.Navigation("Detail_Purchases");
                });

            modelBuilder.Entity("LeageBillete_api.Model.DataBase.Ticket_purchase", b =>
                {
                    b.Navigation("Detail_Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
